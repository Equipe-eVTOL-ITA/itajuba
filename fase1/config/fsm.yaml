fase1_fsm:
  ros__parameters:
    fictual_home_x: 0.0
    fictual_home_y: 0.0
    fictual_home_z: 0.0      # FRD: z positive is DOWN

    num_bases: 6.0
    known_base_radius: 1.7

    # Target shapes to land on
    target_shapes: ["circulo", "triangulo", "hexagono", "hexagono2", "pentagono",
                           "estrela", "cruz", "casa", "quadrado", "quadrado2"]

    # Kept for the FSM logic; NOT used inside vision anymore
    height_to_ground: 1.1

    # Flight profile
    grid_y_length: -40.0 # Must be negative
    grid_step_x: 10.0
    grid_num_steps: 5.0

    takeoff_height: -5.0
    align_height:  -4.0
    max_base_height: 0.0
    mean_base_height: 0.0
    known_base_radius: 1.5


    max_vertical_velocity: 1.2
    max_horizontal_velocity: 1.0
    landing_velocity_max: 0.7
    landing_velocity_min: 0.4
    align_descent_velocity: 0.15

    max_search_time: 30.0
    detection_timeout: 10.0

    position_tolerance: 0.05
    align_tolerance: 0.025


    pid_pos_kp: 1.0
    pid_pos_ki: 0.01
    pid_pos_kd: 0.05
    setpoint: 0.0

fase1_vision:
  ros__parameters:
    timeout: 10.0

    # ===== Choose ONE way to set intrinsics =====
    # A) If you calibrated the RESIZED stream (recommended), set fx/fy/cx/cy directly:
    fx: 817.399115
    fy: 1088.88289
    cx: 435.704031
    cy: 387.858729

    # B) Otherwise, set original camera size and HFOV. The code will model the center crop and resize.
    camera_horizontal_fov: 1.047      # ~60 deg
    camera_original_width: 800       # raw webcam resolution before crop/resize
    camera_original_height: 800
    # Published image size (from your publisher)
    image_width: 800
    image_height: 800


    # ===== Distortion (for the PUBLISHED stream) =====
    dist_k1: 0.0
    dist_k2: 0.0
    dist_p1: 0.0
    dist_p2: 0.0
    dist_k3: 0.0

    # ===== BBox coordinate mode =====
    bbox_is_normalized: true     # true if Detection2D uses [0..1]; false if pixel coordinates

    # ===== Extrinsics: pose of camera expressed in BODY/FRD =====
    # R_b_c = Rz(yaw)*Ry(pitch)*Rx(roll) maps camera vectors → body.
    # These MUST describe your physical mount.
    # Example below assumes a down-looking camera where:
    # image +x maps to body +Y (right),
    # image +y maps to body −X (back),
    # optical axis (+Z_cam) maps to body +Z (down).
    camera_roll: 0.0
    camera_pitch: 0.0
    camera_yaw:   1.570796327

    # Camera position wrt body origin (meters). Positive z means below the FCU (FRD).
    camera_tx: 0.0
    camera_ty: 0.0
    camera_tz: 0.0

    # Real-world size of the base square in meters
    bbox_real_size: 1.0

    # Plane z used by getApproximateBase (FRD z, positive down)
    mean_base_height: 0.0

    # getAccurateBase: if true, project final point onto this plane z after PnP
    accurate_project_to_ground: true
    accurate_ground_z: 0.0
